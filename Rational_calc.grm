(*
<rational-expression> ::= <rational-term> | <rational-term> "+" <rational-term>
                        | <rational-term> "-" <rational-term>
<rational-term> ::= <rational-factor> | <rational-factor> "*" <rational-factor>
                   | <rational-factor> "/" <rational-factor>
<rational-factor> ::= "(" <rational-expression> ")" | <rational> 
*)

%%

%eop EOF SEMI

(* %pos declares the type of positions for terminals.
   Each symbol has an associated left and right position. *)

%pos int

%left SUB PLUS
%left TIMES DIV

%term NUM of Rational.rational | PLUS | TIMES | PRINT |
      SEMI | EOF | CARAT | DIV | SUB | LPAREN | RPAREN
%nonterm EXP of Rational.rational | START of Rational.rational option

%name Calc

%prefer PLUS TIMES DIV SUB
%keyword PRINT SEMI

%noshift EOF
%verbose
%%

(* the parser returns the value associated with the expression *)

  START : PRINT EXP (print (Rational.toDecimal EXP);
                     print "\n";
                     SOME EXP)
        | EXP (SOME EXP)
        | (NONE)
  EXP : NUM             (NUM)
      | EXP PLUS EXP    (Rational.add(EXP1,EXP2))
      | EXP TIMES EXP   (Rational.multiply(EXP1,EXP2))
      | EXP DIV EXP     (valOf(Rational.divide(EXP1,EXP2)))
      | EXP SUB EXP     (Rational.subtract(EXP1,EXP2))
      | LPAREN EXP RPAREN   ((EXP1))
